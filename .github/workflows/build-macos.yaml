name: Build macOS Binaries

on:
  push:
    tags:
      - 'v*'
      - '[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/build-macos.yml'
  workflow_dispatch:
    # inputs:
    #   create_release:
    #     description: 'Create a release'
    #     required: false
    #     default: false
    #     type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-macos:
    name: Build macOS ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   name: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: extractions/setup-just@v3

      - name: Build binary
        env:
          GITHUB_TOKEN: ${{ secrets.RICOCHET_BOT_TOKEN }}
        run: |
          echo "Building for ${{ matrix.target }}..."
          just build ${{ matrix.target }}

          # Configure git authentication for private dependencies
          git config --global url."https://$GITHUB_TOKEN@github.com/".insteadOf "https://github.com/"

          # Create releases directory
          mkdir -p target/releases

          # Copy and rename binary
          if [ -f "target/${{ matrix.target }}/release/ricochet" ]; then
            cp "target/${{ matrix.target }}/release/ricochet" "target/releases/ricochet-${{ matrix.name }}"
            echo "Binary created: target/releases/ricochet-${{ matrix.name }}"
          else
            echo "Error: Binary not found at target/${{ matrix.target }}/release/ricochet"
            exit 1
          fi

      - name: Verify binary
        run: |
          # Check if binary exists and is executable
          file "target/releases/ricochet-${{ matrix.name }}"
          otool -L "target/releases/ricochet-${{ matrix.name }}" | head -20

          # Test that it runs
          "./target/releases/ricochet-${{ matrix.name }}" --version

      - name: Compress binary
        run: |
          cd target/releases
          tar -czf "ricochet-${{ matrix.name }}.tar.gz" "ricochet-${{ matrix.name }}"
          echo "Compressed binary: ricochet-${{ matrix.name }}.tar.gz"
          ls -lh *.tar.gz

      - name: Upload to S3
        uses: actions/upload-artifact@v4
        with:
          name: ricochet-${{ matrix.name }}
          path: target/releases/ricochet-${{ matrix.name }}.tar.gz
          retention-days: 7
