when:
  - event: tag
  - event: deployment
  - event: manual

labels:
  type: autoscale

matrix:
  include:
    - TARGET: x86_64-unknown-linux-gnu
      OUTPUT: linux-x64
    - TARGET: aarch64-unknown-linux-gnu
      OUTPUT: linux-aarch64
    # Enable these when cross-compilation is properly configured
    # - TARGET: x86_64-apple-darwin
    #   OUTPUT: macos-x64
    # - TARGET: aarch64-apple-darwin
    #   OUTPUT: macos-arm64
    - TARGET: x86_64-pc-windows-gnu
      OUTPUT: windows-x64

steps:
  build:
    image: reg.devxy.io/docker.io/library/rust:1.89-slim
    environment:
      SQLX_OFFLINE: true
      GITHUB_TOKEN:
        from_secret: ricochet_bot_token
    commands:
      - apt-get update && apt-get install -y just pkg-config libssl-dev curl wget build-essential gcc-aarch64-linux-gnu musl-tools musl-dev tree git

      # Configure git authentication for private dependencies
      - git config --global url."https://$GITHUB_TOKEN@github.com/".insteadOf "https://github.com/"

      # Build using the new unified build command
      # - just cross-build $TARGET

      # Build static version for Linux targets
      - |
        case "$TARGET" in
          *linux*)
            echo "Building static version for $TARGET..."
            case "$TARGET" in
              x86_64-unknown-linux-gnu)
                just build-static x86_64
                ;;
              aarch64-unknown-linux-gnu)
                just build-static aarch64
                ;;
            esac
            ;;
        esac

      # Show what we built
      - ls -la target/releases/

      # Prepare versioned binaries for upload
      - |
        # Determine version string
        if [ -n "${CI_COMMIT_TAG:-}" ]; then
          VERSION="$CI_COMMIT_TAG"
        else
          SHORT_HASH=$(git rev-parse --short HEAD 2>/dev/null || echo 'dev')
          VERSION="$(date +%Y-%m-%d)-${SHORT_HASH}"
        fi

        outdir="target/binaries/$VERSION"
        mkdir -p "$outdir"


        # Copy and rename binary files with version
        case "$TARGET" in
          x86_64-unknown-linux-gnu)
            cp target/releases/ricochet-linux-x64-static "$outdir/ricochet-$VERSION-linux-x64"
            ;;
          aarch64-unknown-linux-gnu)
            cp target/releases/ricochet-linux-aarch64-static "$outdir/ricochet-$VERSION-linux-aarch64"
            ;;
        esac
        echo "Static binary prepared in: $outdir/"
        ls -la "$outdir/"

        # Verify it's actually static
        file "$outdir"/ricochet-* | grep -i static || echo "Warning: Binary may not be fully static"

  "Upload to S3":
    image: reg.devxy.io/docker.io/woodpeckerci/plugin-s3:1.5.1
    settings:
      bucket: ricochet-cli
      region: hel1
      endpoint: https://hel1.your-objectstorage.com
      access_key:
        from_secret: s3_access_key
      secret_key:
        from_secret: s3_secret_key
      source: target/binaries/**/*
      strip_prefix: target/binaries/
      target: /
