when:
  - event: tag
  - event: deployment
  - event: manual

labels:
  type: autoscale

matrix:
  include:
    - TARGET: x86_64-unknown-linux-gnu
      OUTPUT: linux-x64
    - TARGET: aarch64-unknown-linux-gnu
      OUTPUT: linux-aarch64
    - TARGET: x86_64-pc-windows-gnu
      OUTPUT: windows-x64
    # Enable these when cross-compilation is properly configured
    # - TARGET: x86_64-apple-darwin
    #   OUTPUT: macos-x64
    # - TARGET: aarch64-apple-darwin
    #   OUTPUT: macos-arm64

steps:
  build:
    image: reg.devxy.io/docker.io/library/rust:1.89-slim
    environment:
      SQLX_OFFLINE: true
      GITHUB_TOKEN:
        from_secret: ricochet_bot_token
    commands:
      - apt-get update && apt-get install -y just pkg-config libssl-dev curl wget build-essential gcc-aarch64-linux-gnu musl-tools musl-dev tree git mingw-w64 file zip

      # Configure git authentication for private dependencies
      - git config --global url."https://$GITHUB_TOKEN@github.com/".insteadOf "https://github.com/"

      # Debug: Check git availability and repo status
      - git --version || echo "Git not installed"
      - git status 2>/dev/null || echo "Not a git repository or git not working"
      - echo "CI_COMMIT_SHA: ${CI_COMMIT_SHA:-not set}"

      # Build using the new unified build command
      # - just cross-build $TARGET

      # Build static version for each target
      - |
        mkdir -p target/releases
        case "$TARGET" in
          *linux*)
            echo "Building static Linux version for $TARGET..."
            case "$TARGET" in
              x86_64-unknown-linux-gnu)
                just build-static x86_64
                ;;
              aarch64-unknown-linux-gnu)
                just build-static aarch64
                ;;
            esac
            ;;
          *windows*)
            echo "Building static Windows version for $TARGET..."
            just build-static windows-x64
            ;;
          *)
            echo "Unknown target type: $TARGET"
            ;;
        esac

      # Show what we built
      - ls -la target/releases/ || echo "No files in target/releases yet"
      - find target -name "ricochet*" -type f 2>/dev/null | head -20

      # Prepare versioned binaries for upload
      - |
        # Determine version string
        if [ -n "${CI_COMMIT_TAG:-}" ]; then
          VERSION="$CI_COMMIT_TAG"
        else
          # Try multiple methods to get git hash
          SHORT_HASH=""

          # Method 1: Standard git command
          if command -v git >/dev/null 2>&1; then
            SHORT_HASH=$(git rev-parse --short HEAD 2>/dev/null || true)
          fi

          # Method 2: Use CI environment variable if available
          if [ -z "$SHORT_HASH" ] && [ -n "${CI_COMMIT_SHA:-}" ]; then
            SHORT_HASH=$(echo "$CI_COMMIT_SHA" | cut -c1-8)
          fi

          # Method 3: Fallback to 'dev'
          if [ -z "$SHORT_HASH" ]; then
            SHORT_HASH="dev"
          fi

          VERSION="$(date +%Y-%m-%d)-${SHORT_HASH}"
        fi

        echo "Using version: $VERSION"
        outdir="target/binaries/$VERSION"
        mkdir -p "$outdir"

        # Copy and rename binary files with version
        case "$TARGET" in
          x86_64-unknown-linux-gnu)
            cp target/releases/ricochet-linux-x64-static "$outdir/ricochet-$VERSION-linux-x64"
            ;;
          aarch64-unknown-linux-gnu)
            cp target/releases/ricochet-linux-aarch64-static "$outdir/ricochet-$VERSION-linux-aarch64"
            ;;
          x86_64-pc-windows-gnu)
            cp target/releases/ricochet-windows-x64.exe "$outdir/ricochet-$VERSION-windows-x64.exe"
            ;;
        esac
        echo "Static binary prepared in: $outdir/"
        ls -la "$outdir/"

        # Compress binaries dynamically based on platform
        cd "$outdir"
        for file in ricochet-*; do
          if [ -f "$file" ]; then
            case "$file" in
              *.exe)
                # Windows binary - use zip
                echo "Compressing Windows binary: $file"
                zip -q "${file}.zip" "$file"
                echo "Created: ${file}.zip"
                ;;
              *)
                # Unix binary - use tar.gz
                echo "Compressing Unix binary: $file"
                tar -czf "${file}.tar.gz" "$file"
                echo "Created: ${file}.tar.gz"
                ;;
            esac
          fi
        done
        cd - >/dev/null
        
        echo "Compressed binaries:"
        ls -lh "$outdir"/*.tar.gz "$outdir"/*.zip 2>/dev/null || echo "No compressed files yet"
        
        # Verify binary type
        if [ -n "$(ls $outdir/ricochet-*.exe 2>/dev/null)" ]; then
          file "$outdir"/ricochet-*.exe | grep -i "PE32" && echo "✓ Windows executable verified" || true
        else
          file "$outdir"/ricochet-* 2>/dev/null | grep -i static && echo "✓ Binary is statically linked" || echo "Note: Could not verify static linking"
        fi

  "Upload to S3":
    image: reg.devxy.io/docker.io/woodpeckerci/plugin-s3:1.5.1
    settings:
      bucket: ricochet-cli
      region: hel1
      endpoint: https://hel1.your-objectstorage.com
      access_key:
        from_secret: s3_access_key
      secret_key:
        from_secret: s3_secret_key
      source: target/binaries/**/*
      strip_prefix: target/binaries/
      target: /
