when:
  - event: tag
  - event: deployment
  - event: manual

labels:
  type: autoscale

matrix:
  include:
    # - TARGET: x86_64-unknown-linux-gnu
      # OUTPUT: linux-x64
      # IMAGE: reg.devxy.io/docker.io/library/rust:1.89-slim
    # - TARGET: aarch64-unknown-linux-gnu
      # OUTPUT: linux-aarch64
      # IMAGE: reg.devxy.io/docker.io/library/rust:1.89-slim
    # - TARGET: x86_64-pc-windows-gnu
      # OUTPUT: windows-x64
      # IMAGE: reg.devxy.io/docker.io/library/rust:1.89-slim
    - TARGET: x86_64-apple-darwin
      IMAGE: reg.devxy.io/devxy/rust-osxcross:15.5-debian
    # - TARGET: aarch64-apple-darwin
      # IMAGE: reg.devxy.io/devxy/rust-osxcross:15.5-debian

steps:
  build:
    image: ${IMAGE}
    pull: true
    environment:
      SQLX_OFFLINE: true
      GITHUB_TOKEN:
        from_secret: ricochet_bot_token
    commands:
      - apt-get update && apt-get install -y just pkg-config libssl-dev curl wget build-essential gcc-aarch64-linux-gnu musl-tools musl-dev tree git mingw-w64 file zip

      # Configure git authentication for private dependencies
      - git config --global url."https://$GITHUB_TOKEN@github.com/".insteadOf "https://github.com/"

      # Build static version for each target
      - just build $TARGET

      # Show what we built
      - ls -la target/releases/ || echo "No files in target/releases yet"

      # Prepare versioned binaries for upload
      - |
        # Determine version string
        if [ -n "${CI_COMMIT_TAG:-}" ]; then
          VERSION="$CI_COMMIT_TAG"
        else
          VERSION="$(date +%Y-%m-%d)-${CI_COMMIT_SHA:0:8}"
        fi

        echo "Using version: $VERSION"
        outdir="target/binaries/$VERSION"
        mkdir -p "$outdir"

        # Copy and rename binary files with version
        for file in target/$TARGET/release/*; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            arch=$(echo "$filename" | sed 's/^ricochet-//')

            new_name="ricochet-$VERSION-$arch"
            mv "$file" "$outdir/$new_name"
            echo "Moved: $filename -> $new_name"
          fi
        done

        echo "Static binary prepared in: $outdir/"
        ls -la "$outdir/"

        # Compress binaries dynamically based on platform
        cd "$outdir"
        for binary_file in ricochet-*; do
          if [ -f "$binary_file" ]; then
            echo "Processing file: $binary_file"
            case "$binary_file" in
              *.exe)
                # Windows binary - use zip
                echo "Compressing Windows binary: $binary_file"
                zip_name="${binary_file}.zip"
                zip -j "$zip_name" "$binary_file"
                echo "Created: $zip_name"
                ls -lh "$zip_name"
                ;;
              *)
                # Unix binary - use tar.gz
                echo "Compressing Unix binary: $binary_file"
                tar_name="${binary_file}.tar.gz"
                tar -czf "$tar_name" "$binary_file"
                echo "Created: $tar_name"
                ls -lh "$tar_name"
                ;;
            esac
          fi
        done
        cd - >/dev/null

        echo "Compressed binaries:"
        ls -lh "$outdir"/*.tar.gz "$outdir"/*.zip 2>/dev/null || echo "No compressed files yet"

        # Verify binary type
        if [ -n "$(ls $outdir/ricochet-*.exe 2>/dev/null)" ]; then
          file "$outdir"/ricochet-*.exe | grep -i "PE32" && echo "✓ Windows executable verified" || true
        else
          file "$outdir"/ricochet-* 2>/dev/null | grep -i static && echo "✓ Binary is statically linked" || echo "Note: Could not verify static linking"
        fi

  "Upload to S3":
    image: reg.devxy.io/docker.io/woodpeckerci/plugin-s3:1.5.1
    settings:
      bucket: ricochet-cli
      region: hel1
      endpoint: https://hel1.your-objectstorage.com
      access_key:
        from_secret: s3_access_key
      secret_key:
        from_secret: s3_secret_key
      source: target/binaries/**/*
      strip_prefix: target/binaries/
      target: /
